# -*- coding: utf-8 -*-
"""AdaBoost2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZWxd0iOxVJusFotcEs3NrVi90Dk1ylUl
"""

#importing packages
import pandas as pd
from sklearn.ensemble import AdaBoostClassifier
from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score,validation_curve
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.svm import SVC

# Code to read csv file into Colaboratory:!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

datalink = "https://drive.google.com/open?id=1hVeVn24avXF07szwtrMkF1ZOLFjkkfxu"
fluff, id = datalink.split('=')
downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('scaledfeatures.csv')  
RawData = pd.read_csv('scaledfeatures.csv')

RawData.head()

#Separating features and target and train and test
X = RawData.iloc[:,4:55]
Y = RawData.iloc[:,55]
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.30)

Y.head()

#AdaBoost Classification
AdaBoost = AdaBoostClassifier(n_estimators=100,learning_rate=1)
BoostModel = AdaBoost.fit(X_train,y_train)
prediction = BoostModel.predict(X_test)

#Evaluation
print("Accuracy:",metrics.accuracy_score(y_test,prediction))

#AdaBoost with estimator as logistic regression
LogReg = LogisticRegression()
AdaBLog = AdaBoostClassifier(n_estimators=100,base_estimator=LogReg, learning_rate=1)
BoostModelL = AdaBLog.fit(X_train,y_train)
predictionL = BoostModelL.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test,predictionL))
print(classification_report(y_test,predictionL))

#LogReg = LogisticRegression()
#AdaBLog = AdaBoostClassifier(n_estimators=200,base_estimator=LogReg, learning_rate=1)
#BoostModelL = AdaBLog.fit(X_train,y_train)
#AdaBLog.feature_importances_
grid_params = {'n_estimators':[100,150,200]}
grid_object = GridSearchCV(estimator = AdaBLog, param_grid = grid_params, scoring = 'accuracy', cv=5, n_jobs=-1)
gridBoost = grid_object.fit(X_train,y_train)
gridPrediction = gridBoost.predict(X_test)


#grid_object.best_params_

print("Accuracy:",metrics.accuracy_score(y_test,gridPrediction))
print(classification_report(y_test,gridPrediction))

